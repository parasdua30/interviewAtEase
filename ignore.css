import React, { useCallback, useEffect, useState } from "react";
import VideoCall from "./VideoCall";
import Editor from "./Editor";
import WhiteBoard from "./WhiteBoard";
import Options from "./Options";
import { useSocket } from "../Socket";
import { useNavigate, useParams } from "react-router-dom";
import peer from "../../service/peer";
import ReactPlayer from "react-player";
import { useDispatch, useSelector } from "react-redux";
// import { setRemoteSocketId } from "../redux/reducers/user";

function MeetingRoom() {
    const socket = useSocket();
    const navigate = useNavigate();
    const params = useParams();
    const dispatch = useDispatch();
    const [selectedOption, setSelectedOption] = useState("editor");

    // Connection Purposes
    // const remoteSocketId = useSelector((state) => state.user.remoteSocketId);
    const [remoteSocketId, setRemoteSocketId] = useState(null);
    const [myStream, setMyStream] = useState(null);
    const [remoteStream, setRemoteStream] = useState(null);

    const handleOptionClick = (option) => {
        setSelectedOption(option);
    };

    const handleLeaveRoom = useCallback(() => {
        navigate("/");
    }, [navigate]);

    /*
        const handleUserJoined = useCallback(({ username, id }) => {
            console.log(`${username} Joined Room`);
            console.log("Setting remote socket id", id);
            setRemoteSocketId(id);
            // dispatch(setRemoteSocketId(id));
        }, []);

        const handleCallUser = useCallback(async () => {
            const stream = await navigator.mediaDevices.getUserMedia({
                audio: true,
                video: true,
            });
            setMyStream(stream);

            const offer = await peer.getOffer();
            socket.emit("user:call", { to: remoteSocketId, offer });
        }, [remoteSocketId, socket]);

        const handleIncomingCall = useCallback(
            async ({ from, offer }) => {
                setRemoteSocketId(from);
                // dispatch(setRemoteSocketId(from));
                const stream = await navigator.mediaDevices.getUserMedia({
                    audio: true,
                    video: true,
                });
                setMyStream(stream);

                console.log("Incoming Call", from, offer);
                const ans = await peer.getAnswer(offer);
                socket.emit("call:accepted", { to: from, ans });
            },
            [socket]
        );

        const sendStreams = useCallback(() => {
            for (const track of myStream.getTracks()) {
                peer.peer.addTrack(track, myStream);
            }
        }, [myStream]);

        const handleCallAccepted = useCallback(
            ({ from, ans }) => {
                peer.setLocalDescription(ans);
                console.log("Call Accepted!");
                sendStreams();
            },
            [sendStreams]
        );

        const handleNegoNeeded = useCallback(async () => {
            const offer = await peer.getOffer();
            socket.emit("peer:nego:needed", { offer, to: remoteSocketId });
        }, [remoteSocketId, socket]);

        // Handling Peer Negotiation Needed
        useEffect(() => {
            peer.peer.addEventListener("negotiationneeded", handleNegoNeeded);
            return () => {
                peer.peer.removeEventListener(
                    "negotiationneeded",
                    handleNegoNeeded
                );
            };
        }, [handleNegoNeeded]);

        const handleNegoNeedIncomming = useCallback(
            async ({ from, offer }) => {
                const ans = await peer.getAnswer(offer);
                socket.emit("peer:nego:done", { to: from, ans });
            },
            [socket]
        );

        const handleNegoNeedFinal = useCallback(async ({ ans }) => {
            await peer.setLocalDescription(ans);
        }, []);

        useEffect(() => {
            peer.peer.addEventListener("track", async (ev) => {
                const remoteStream = ev.streams;
                console.log("Got Tracks");
                setRemoteStream(remoteStream[0]);
            });
        });

        // Handling Socket Events
        useEffect(() => {
            socket.on("user:joined", handleUserJoined);
            socket.on("incoming:call", handleIncomingCall);
            socket.on("call:accepted", handleCallAccepted);
            socket.on("peer:nego:needed", handleNegoNeedIncomming);
            socket.on("peer:nego:done", handleNegoNeedFinal);

            return () => {
                socket.off("user:joined", handleUserJoined);
                socket.off("incoming:call", handleIncomingCall);
                socket.off("call:accepted", handleCallAccepted);
                socket.off("peer:nego:needed", handleNegoNeedIncomming);
                socket.off("peer:nego:done", handleNegoNeedFinal);
            };
        }, [
            socket,
            handleUserJoined,
            handleIncomingCall,
            handleCallAccepted,
            handleNegoNeedIncomming,
            handleNegoNeedFinal,
        ]);
    */


    return (
        <div className="min-h-screen bg-gray-950 text-white">
            <div className="h-screen flex flex-row">
                {/* // Left Side */}
                <div className="bg-gray-800 h-5/5 w-1/5 rounded-lg border border-white text-white m-3">
                    <div className="flex flex-col h-full space-y-2 ">
                        {/* Top Buttons */}
                        <div className="flex justify-between w-full">
                            <button
                                className="bg-red-500 rounded m-1 p-2"
                                onClick={handleLeaveRoom}
                            >
                                Exit
                            </button>
                            <button
                                className="bg-gray-600 rounded m-1 p-2"
                                onClick={() =>
                                    navigator.clipboard.writeText(params.roomId)
                                }
                            >
                                Copy Room Id
                            </button>
                        </div>

                        <h4>
                            {remoteSocketId ? "Connected" : "No one in room"}
                        </h4>
                        {myStream && (
                            <button
                                className="bg-gray-600 rounded m-2 p-2"
                                onClick={sendStreams}
                            >
                                Send Stream
                            </button>
                        )}
                        {remoteSocketId && (
                            <button
                                className="bg-gray-600 rounded m-2 p-2"
                                onClick={handleCallUser}
                            >
                                CALL
                            </button>
                        )}

                        <div className="flex flex-col items-center justify-evenly w-full">
                            {myStream && (
                                <>
                                    <h1>My Stream</h1>
                                    <ReactPlayer
                                        playing
                                        muted
                                        height="100px"
                                        width="200px"
                                        url={myStream}
                                    />
                                </>
                            )}
                        </div>

                        {remoteStream && (
                            <>
                                <h1>Remote Stream</h1>
                                <ReactPlayer
                                    playing
                                    muted
                                    height="100px"
                                    width="200px"
                                    url={remoteStream}
                                />
                            </>
                        )}
                    </div>
                </div>
                {/* // Right Side */}
                {selectedOption === "both" && (
                    <div className="w-4/5 flex flex-row">
                        <div className="bg-gray-800 w-1/2 rounded-lg border border-white text-white mt-3 mb-3 mr-3">
                            <Editor />
                        </div>
                        <div className="bg-gray-800 w-1/2 rounded-lg border border-white text-white mt-3 mb-3 mr-3">
                            <WhiteBoard />
                        </div>
                    </div>
                )}
                {selectedOption === "editor" && (
                    <div className="bg-gray-800 w-4/5 rounded-lg border border-white text-white mt-3 mb-3 mr-3">
                        <Editor />
                    </div>
                )}
                {selectedOption === "whiteboard" && (
                    <div className="bg-gray-800 w-4/5 rounded-lg border border-white text-white mt-3 mb-3 mr-3">
                        <WhiteBoard />
                    </div>
                )}
            </div>
        </div>
    );
}

export default MeetingRoom;

// {
//     /* // Left Side */
// }
// {
//     /* <div className="h-screen w-1/5"> */
// }
// <VideoCall />;
// {
//     /* </div> */
// }
// {

// <div className="min-h-screen bg-gray-950 text-white font-roboto">
//     <div className="flex justify-center my-4">
//         <button
//             className={`mx-2 px-4 py-2 rounded-md ${
//                 selectedOption === "editor" ? "bg-blue-500" : "bg-gray-700"
//             }`}
//             onClick={() => handleOptionClick("editor")}
//         >
//             Editor
//         </button>
//         <button
//             className={`mx-2 px-4 py-2 rounded-md ${
//                 selectedOption === "whiteboard" ? "bg-blue-500" : "bg-gray-700"
//             }`}
//             onClick={() => handleOptionClick("whiteboard")}
//         >
//             WhiteBoard
//         </button>
//         <button
//             className={`mx-2 px-4 py-2 rounded-md ${
//                 selectedOption === "both" ? "bg-blue-500" : "bg-gray-700"
//             }`}
//             onClick={() => handleOptionClick("both")}
//         >
//             Both
//         </button>
//     </div>

// {selectedOption === "editor" && <Editor />}
// {selectedOption === "whiteboard" && <WhiteBoard />}
// {selectedOption === "both" && (
//     <>
//         <Editor />
//         <WhiteBoard />
//     </>
// )}
// </div>;
// }
// <Editor />;


